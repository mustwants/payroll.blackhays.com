# Black Hays Payroll Management System - Frontend Architecture

## Overview
This document outlines the folder structure for the Black Hays Payroll Management System, a React-based frontend application using client-side storage.

## Root Project Structure
```
/payroll-management-system
├── package.json           # Main package dependencies
├── vite.config.js         # Vite configuration
├── .env                   # Environment variables (gitignored)
├── .env.example           # Example environment variables
├── .gitignore             # Git ignore file
├── README.md              # Project documentation
├── public/                # Static assets
│   └── favicon.svg        # Favicon
├── src/                   # Source code
│   ├── main.jsx           # Entry point
│   ├── App.jsx            # Root component
│   ├── api/               # API integration layer (client-side)
│   ├── assets/            # Static assets
│   ├── components/        # Reusable components
│   ├── contexts/          # React contexts
│   ├── hooks/             # Custom React hooks
│   ├── layouts/           # Layout components
│   ├── microservices/     # Microservices modules
│   ├── pages/             # Page components
│   ├── services/          # Service layers (client-side)
│   ├── store/             # State management
│   ├── styles/            # Global styles
│   └── utils/             # Utility functions
└── tests/                 # Test files
```

## Frontend Architecture
The application is organized as a modular frontend with a microservices-inspired structure, using client-side storage (localStorage) to persist data for demonstration purposes. Each functional domain has its own dedicated module with components, state management, and logic.

```
/src/microservices/
├── auth/                  # Authentication module
│   ├── components/        # Auth-specific components
│   ├── context/           # Auth context
│   ├── hooks/             # Auth-related hooks
│   ├── pages/             # Auth pages (login, register)
│   ├── services/          # Auth services (client-side)
│   └── utils/             # Auth utilities
├── employees/             # Employee management module
│   ├── components/        # Employee-specific components
│   ├── context/           # Employee context
│   ├── hooks/             # Employee-related hooks
│   ├── pages/             # Employee pages
│   ├── services/          # Employee services (client-side)
│   └── utils/             # Employee utilities
├── clients/               # Client management module
│   ├── components/        # Client-specific components
│   ├── context/           # Client context
│   ├── hooks/             # Client-related hooks
│   ├── pages/             # Client pages
│   ├── services/          # Client services (client-side)
│   └── utils/             # Client utilities
├── timeTracking/          # Time tracking module
│   ├── components/        # Time tracking components
│   ├── context/           # Time tracking context
│   ├── hooks/             # Time tracking hooks
│   ├── pages/             # Time tracking pages
│   ├── services/          # Time tracking services (client-side)
│   └── utils/             # Time tracking utilities
├── taskAssignment/        # Task assignment module
│   ├── components/        # Task assignment components
│   ├── context/           # Task assignment context
│   ├── hooks/             # Task assignment hooks
│   ├── pages/             # Task assignment pages
│   ├── services/          # Task assignment services (client-side)
│   └── utils/             # Task assignment utilities
├── payroll/               # Payroll processing module
│   ├── components/        # Payroll-specific components
│   ├── context/           # Payroll context
│   ├── hooks/             # Payroll-related hooks
│   ├── pages/             # Payroll pages
│   ├── services/          # Payroll services (client-side)
│   └── utils/             # Payroll utilities
├── reports/               # Reporting module
│   ├── components/        # Report-specific components
│   ├── hooks/             # Report-related hooks
│   ├── pages/             # Report pages
│   ├── services/          # Report services (client-side)
│   └── utils/             # Report utilities
└── companyInfo/           # Company information module
    ├── components/        # Company info components
    ├── context/           # Company info context
    ├── hooks/             # Company info hooks
    ├── pages/             # Company info pages
    ├── services/          # Company info services (client-side)
    └── utils/             # Company info utilities
```

## Shared Components
```
/src/components/
├── ui/                    # UI component library
│   ├── Button.jsx         # Button component
│   ├── Card.jsx           # Card component
│   ├── Modal.jsx          # Modal component
│   ├── Table.jsx          # Table component
│   ├── Form/              # Form components
│   ├── Inputs/            # Input components
│   ├── Feedback/          # Feedback components
│   └── Layout/            # Layout components
├── charts/                # Chart components
├── tables/                # Table components
├── forms/                 # Form components
├── modals/                # Modal components
└── navigation/            # Navigation components
```

## Client-side Services
```
/src/services/
├── authService.js         # Authentication service (client-side)
├── storageService.js      # Local storage service
├── notificationService.js # Notification service
├── logService.js          # Logging service
├── validationService.js   # Validation service
└── googleScriptService.js # Google Apps Script integration
```

## External Integrations
The application is designed to interface with:

1. **Google Authentication**: For user login via Google OAuth
2. **Google Apps Script**: For optional data persistence and spreadsheet integration

## Data Flow Architecture
1. **Client-side Storage**: Using localStorage for persistence in the demo environment
2. **Context API**: React Context for state management within modules
3. **Custom Hooks**: Business logic encapsulated in custom hooks
4. **Service Layer**: Core business logic in service modules

## Security Considerations
1. **Authentication**: Mock JWT-based authentication for demo purposes
2. **Authorization**: Role-based access control (admin vs. employee)
3. **Domain Restriction**: Limiting sign-in to specific email domains

## Responsiveness Strategy
1. **Mobile-First Design**: UI components designed for mobile first
2. **TailwindCSS**: Utilizing Tailwind for responsive design
3. **Media Queries**: Custom breakpoints for various screen sizes

## Progressive Enhancement Notes
In a production environment, this frontend application would be connected to:

1. **Backend APIs**: RESTful or GraphQL services for data persistence
2. **Authentication Provider**: OAuth integration for secure user authentication
3. **Database**: Proper database instead of localStorage
4. **Cloud Hosting**: Deployment to cloud provider with CI/CD